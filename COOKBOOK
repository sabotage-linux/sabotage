= The Saboteur's Cookbook

a guide to running Sabotage for the experienced user.


== Installing the system

see the wiki page "boostrap to hd image" or utils/write-hd-image.sh

== Butch, the build manager

  butch is a 700 LOC C program written from scratch, which handles the package download,
  checksum comparison, build process, and dependencies in a relatively sane manner.

  it suports the following commands

    butch install <(meta)package> <(meta)package> <(meta)package> ...
    butch rebuild <(meta)package> <(meta)package> <(meta)package> ...
    butch prefetch <(meta)package> <(meta)package> <(meta)package> ...

  currently butch will start up to 16 download threads and up to 2 build threads.
  since busybox' wget (used inside the chroot) has a number of issues, 
  it is advised to download all packages at once before starting the build process.

  this can be achieved by issuing

    butch prefetch stage0 stage1 pkg xorg gdb

== Bootstrapping the system

see README.

== System Administration

Sabotage does things a bit differently than your usual Linux
distribution!

=== The file system

Sabotage does not follow FHS.  /usr is a legacy symlink to /, /sbin is
a legacy symlink to /bin.  Software should be installed with
--prefix=/.  The times of a seperate root partition are long over.

Everything below /local is yours, use it wisely.  Software not
packaged by Sabotage should not touch stuff outside, it could possibly
break on updates.

Use /srv/$SERVICE/$VHOST for all server data.

=== The init system

Sabotage uses runit as init system (not entirely, so far we use
Busybox init to start runsvdir).  This is cool, see
http://busybox.net/~vda/init_vs_runsv.html.

The base system has a few services, which you find in /var/service
(note that these are symlinks to /etc/service):

  dmesg - logs kernel messages
  sshd  - opensshd, down by default
  tty2, tty3, tty4 - three gettys
  crond - cron daemon

You can start services with "sv u $SERVICE" or take them down with "sv
d $SERVICE".  By default, all services in /var/service start at boot
time, unless they have a "down" file in their directory---then you'll
have to start them manually.  If you don't want to use a service at all,
best remove the symlink to /etc/service.

You can find out whats running and what is not with

  # sv s /var/service/*

Look into the service directories to find out how to add your own
services---note that you must tell them not to daemonize!

For the rest of runit, I'll refer you to the documentation at
http://smarden.org/runit/index.html

=== Logging

There is no syslog support so far, services should use "svlogd" (see
runit docs) to log into directories below /var/log.
You can inspect the logs by looking at /var/log/$SERVICE/current,
Kernel messages are found in /var/log/dmesg/current.

You can quickly look at all logs with

  # sort /var/log/*/current  |less

