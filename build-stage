#!/bin/sh
export H="$PWD"
. ./config

if [ ! -r "$H"/config ]; then
    printf -- "couldn't read configuration file: %s\n" "$H/config"
    printf -- "copy %s to %s and edit appropriately\n" "$K/config.stage0" "$H/config"
    exit 1
fi

# ./build-stage 1 is only for building a fresh stage1 from WITHIN sabotage. To
# build from out of sabotage, you need to ./build-stage 0, then build stage1
# with butch from within the built system.
# there's now an additional stage "u". it allows to use butch with sabotage packages
# in a custom prefix.
STAGE="$1"
if [ ! "$STAGE" ]
then
    printf -- "Please specify a stage to build.\n"
    exit 1
fi
printf -- "Building stage %d\n" "$STAGE"

# enable verbose printing, abort on error
set -e -x

mkdir -p "$K" "$C" "$S" "$R" "$LOGPATH"

. "$H"/utils/sabotage-prereqs
. "$H"/utils/utils
. "$H"/utils/prepare-rootfs
if [ "$STAGE" = "0" ] || [ "$STAGE" = "u" ] ; then
	CC_SAVE="$CC"
	[ "$STAGE" = "u" ] && CC=musl-gcc
	. "$H"/utils/build-butch
	CC="$CC_SAVE"
fi

# update-buildroot - copy to sources
cp -r "$H"/pkg "$S"/
cp -r "$H"/KEEP "$S"/

# on ARM, gcc 3.4.6 is not sufficient to build for EABI
[ "$A" = "arm" ] && cat << EOF > "$S"/pkg/stage0_gcc
[deps]
gcc424
EOF

# NOTE
# installation starts all over if installed.dat is not there.
# to manually continue a stage0 build, run
#     $R/bin/butch install stage0
# in case the build failed or was interrupted.
rm -f "$S"/pkg/installed.dat

if [ "$STAGE" = "0" ] ; then
	# build stage0
	CONFIG="$H/config" BUTCHDB="$R"/var/lib/butch.db "$R"/bin/butch install stage0
elif [ "$STAGE" = "u" ] ; then
	mv "$R/bin/butch" "$R/bin/butch"
	path_save="$PATH"
	export PATH="$R/bin/:$PATH"
	export STAGEU=1
	if "$R/bin/butch" install stage0 ; then
		CC="musl-gcc"
		"$R/bin/butch" install stageu
	fi
	export PATH=$path_save
else
	# build stage1
	butch install stage1

	# build butch
	butch install butch

	# and finalize the chroot
	"$H"/utils/finish
fi

