#!/bin/sh
check_config(){
	if [ -z "$S" ] ; then
		echo 'S not set, did you source config ?'
		exit 1
	fi
}
BINDIR=$(dirname $(readlink -f "$0"))
usage() {
	echo "$0 - creates a checksum over all of the files of one package" >&2
	echo "this serves as a unique fingerprint of a package and is used to" >&2
	echo "implement reproducible builds." >&2
	echo >&2
	echo "usage: $0 [-d/-o/-D/-h hashtype] packagename" >&2
	echo "-d (details) is optional and prints the checksum of every single file" >&2
	echo "-o (only details) is optional and activates details, but leaves away">&2
	echo "the final checksum." >&2
	echo "-D (directory) packagename is treated as a directory name">&2
	echo "hashtype defaults to sha512. possible values: md5,sha1,sha256,sha512">&2
	exit 1
}

sha512_chars=128
sha256_chars=64
sha1_chars=40
md5_chars=32

hash_algo=sha512
hash_chars=$sha512_chars
hash_command=

details=false
xorsum=true
dirmode=false
parse_opts() {
[ -z "$hash_algo" ] && { hash_algo="$1" ; return 0 ; }
[ "$1" = "-d" ] && { details=true ; return 0 ; }
[ "$1" = "-o" ] && { details=true ; xorsum=false ; return 0; }
[ "$1" = "-D" ] && { dirmode=true ; return 0; }
[ "$1" = "-h" ] && { hash_algo= ; return 0; }
return 1;
}
while parse_opts "$1" ; do shift ; done
[ -z "$1" ] && usage
case "$hash_algo" in
	md5|sha1|sha256|sha512) eval hash_chars=\$${hash_algo}_chars ;;
	*) usage ;;
esac
eval hash_command=${hash_algo}sum

empty_hash=
i=0
while test $i -lt $hash_chars ; do
	empty_hash=${empty_hash}0
	i=$(($i + 1))
done

pkg=$1

if ! $dirmode ; then
	check_config
	[ -z "$butch_staging_dir" ] && butch_staging_dir=/opt
	[ -z "$butch_filelists" ] && butch_filelists="$S"/filelists

	fl="$butch_filelists"/"$pkg".txt
	if [ ! -e "$fl" ] ; then
		echo 0-"$empty_hash"
		exit 0
	fi
	tmpfl=
else
	butch_staging_dir=
	tmpfl=$(mktemp)
	"$BINDIR"/butch-genfilelist -D "$pkg" - > "$tmpfl"
	fl="$tmpfl"
fi
tmpf=$(mktemp)
gethash() {
	local foo=$($hash_command "$1" 2>/dev/null)
	[ "$?" != 0 ] && return 1
	printf "%s" "$foo" | cut -d " " -f 1
}
prepare_xor_func() {
	make_xor_c && return 2
	AWK=awk
	test "$(xor_awk f0 0e 2>&1)" = fe && return 1
	AWK=gawk -n
	test "$(xor_awk f0 0e 2>&1)" = fe && return 1
	AWK=busybox awk
	test "$(xor_awk f0 0e 2>&1)" = fe && return 1
	#it's probably mawk then...
	return 0
}
make_xor_c(){
umask 077
cat << EOF > /tmp/xor.$$.c || return 1
#include <stdio.h>
#include <string.h>
#include <ctype.h>
static unsigned hex2num(int c){const char h[]="0123456789ABCDEF";
return strchr(h, toupper(c))-h;}
int main(int a, char**b) {if(a!=3) return 1;
unsigned l=strlen(b[1]),i=0;
while(i<l){printf("%x", hex2num(b[1][i])^hex2num(b[2][i]));i++;}
printf("\n");return 0;
}
EOF
test -z "$CC" && CC=cc
ret=0
if ! $CC /tmp/xor.$$.c -O1 -o /tmp/xor.$$.elf && ! gcc /tmp/xor.$$.c -o /tmp/xor.$$.elf ; then
	ret=1
fi
rm /tmp/xor.$$.c
return $ret
}
xor_awk() {
echo $1 $2 | $AWK '{n=split($1,a,"");split($2,b,"");for(i=1;i<=n;i++){x1="0x" a[i];x2="0x" b[i];x=xor(x1,x2);printf("%x", x);}printf("\n");}'
}
hex_to_dec() {
printf "%d" 0x$1
}
xor_shell() {
l=$(printf "%s" "$1"|wc -c)
for i in `seq 1 $l` ; do
a=$(hex_to_dec $(echo $1 | cut -b $i))
b=$(hex_to_dec $(echo $2 | cut -b $i))
printf "%x" $(($a ^ $b))
done
printf "\n"
}
xor() {
	if test $awk_works = 1 ; then
		xor_awk $1 $2
	elif test $awk_works = 2 ; then
		/tmp/xor.$$.elf $1 $2
	else
		# that's gonna be real slow :-)
		xor_shell $1 $2
	fi
}
res=$empty_hash
cnt=0
$xorsum && {
	prepare_xor_func
	awk_works=$?
}

if ! $dirmode ; then
	[ "$R" = "/" ] && R=
	butch_install_dir="$butch_staging_dir"/"$pkg"
	dest_dir="$R""$butch_install_dir"
else
	dest_dir="$pkg"
fi
IFS='
'
for f in `cat "$fl" | sort` ; do
	fs=$(printf "%s\n" "$f" | sed 's,^.,,g')
	sha=$(gethash "$dest_dir""$fs") || continue
	test -z "$sha" && continue
	printf "%s %s\n" "$sha" "$fs" >> "$tmpf"
	$xorsum && {
		res=$(xor $res $sha)
		cnt=$(($cnt + 1))
	}
done
$xorsum && test "$awk_works" = 2 && rm /tmp/xor.$$.elf
$details && cat "$tmpf"
$xorsum && echo ${cnt}-${res}

rm "$tmpf"
[ -n "$tmpfl" ] && rm "$tmpfl" || true
