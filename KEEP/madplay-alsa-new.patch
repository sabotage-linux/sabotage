--- a/audio_alsa.c
+++ b/audio_alsa.c
@@ -28,8 +28,6 @@
 
 #include <errno.h>
 
-#define ALSA_PCM_OLD_HW_PARAMS_API
-#define ALSA_PCM_OLD_SW_PARAMS_API
 #include <alsa/asoundlib.h>
 
 #include <mad.h>
@@ -39,20 +37,20 @@
 char *buf	= NULL;
 int paused	= 0;
 
-int rate	= -1;
+unsigned rate	= -1;
 int channels	= -1;
 int bitdepth	= -1;
 int sample_size	= -1;
 
-int buffer_time		= 500000;
-int period_time		= 100000;
-char *defaultdev	= "plughw:0,0";
+unsigned buffer_time	= 500000;
+unsigned period_time	= 100000;
+char *defaultdev	= "default";
 
 snd_pcm_hw_params_t *alsa_hwparams;
 snd_pcm_sw_params_t *alsa_swparams;
 
-snd_pcm_sframes_t buffer_size;
-snd_pcm_sframes_t period_size;
+snd_pcm_uframes_t buffer_size;
+snd_pcm_uframes_t period_size;
 
 snd_pcm_format_t  alsa_format = -1;
 snd_pcm_access_t  alsa_access = SND_PCM_ACCESS_MMAP_INTERLEAVED;
@@ -66,7 +64,8 @@
 		 snd_pcm_hw_params_t *params,
 		 snd_pcm_access_t access)
 {
-	int err, dir;
+	int err, dir = 0;
+	unsigned want;
 	
 	/* choose all parameters */
 	err = snd_pcm_hw_params_any(handle,params);
@@ -87,29 +86,40 @@
 		return err;
 	}
 	/* set the stream rate */
-	err = snd_pcm_hw_params_set_rate_near(handle, params, rate, 0);
+	dir = 0;
+	want = rate;
+	err = snd_pcm_hw_params_set_rate_near(handle, params, &rate, &dir);
 	if (err < 0) {
-		printf("Rate %iHz not available for playback: %s\n", rate, snd_strerror(err));
+		printf("Rate %uHz not available for playback: %s\n", rate, snd_strerror(err));
 		return err;
 	}
-	if (err != rate) {
-		printf("Rate doesn't match (requested %iHz, get %iHz)\n", rate, err);
+	if (want != rate) {
+		printf("Rate doesn't match (requested %uHz, get %uHz)\n", want, rate);
 		return -EINVAL;
 	}
 	/* set buffer time */
-	err = snd_pcm_hw_params_set_buffer_time_near(handle, params, buffer_time, &dir);
+	dir = 0;
+	err = snd_pcm_hw_params_set_buffer_time_near(handle, params, &buffer_time, &dir);
 	if (err < 0) {
-		printf("Unable to set buffer time %i for playback: %s\n", buffer_time, snd_strerror(err));
+		printf("Unable to set buffer time %u for playback: %s\n", buffer_time, snd_strerror(err));
+		return err;
+	}
+	err = snd_pcm_hw_params_get_buffer_size(params, &buffer_size);
+	if (err < 0) {
+		printf("Unable to get buffer size\n");
 		return err;
 	}
-	buffer_size = snd_pcm_hw_params_get_buffer_size(params);
 	/* set period time */
-	err = snd_pcm_hw_params_set_period_time_near(handle, params, period_time, &dir);
+	err = snd_pcm_hw_params_set_period_time_near(handle, params, &period_time, &dir);
+	if (err < 0) {
+		printf("Unable to set period time %u for playback: %s\n", period_time, snd_strerror(err));
+		return err;
+	}
+	err = snd_pcm_hw_params_get_period_size(params, &period_size, &dir);
 	if (err < 0) {
-		printf("Unable to set period time %i for playback: %s\n", period_time, snd_strerror(err));
+		printf("Unable to get period size\n");
 		return err;
 	}
-	period_size = snd_pcm_hw_params_get_period_size(params, &dir);
 	/* write the parameters to device */
 	err = snd_pcm_hw_params(handle, params);
 	if (err < 0) {
@@ -190,7 +200,7 @@
 	rate		= config->speed;
 
 	if ( bitdepth == 0 )
-		config->precision = bitdepth = 32;
+		config->precision = bitdepth = 16;
 
 	switch (bitdepth)
 	{
@@ -279,9 +289,9 @@
 int play(struct audio_play *play)
 {
 	int err, len;
-	char *ptr;
+	unsigned char *ptr;
 
-	ptr = buf;
+	ptr = (void*) buf;
 	len = play->nsamples;
 
 	audio_pcm(ptr, len, play->samples[0], play->samples[1],
