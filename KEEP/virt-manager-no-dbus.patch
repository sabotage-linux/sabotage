--- virt-manager-0.9.5.org/src/virt-manager.py	2013-10-27 17:33:16.551817115 +0000
+++ virt-manager-0.9.5/src/virt-manager.py	2013-10-27 17:37:05.652820188 +0000
@@ -210,33 +210,6 @@
     if show or uri or uuid:
         launch_specific_window(managerObj, show, uri, uuid)
 
-def dbus_config(engine):
-    """
-    Setup dbus interface
-    """
-    import dbus
-    from virtManager.remote import vmmRemote
-    bus = None
-
-    if os.getenv("DBUS_STARTER_ADDRESS") is None:
-        bus = dbus.SessionBus()
-    else:
-        bus = dbus.StarterBus()
-
-    dbusProxy = bus.get_object("org.freedesktop.DBus", "/org/freedesktop/DBus")
-    dbusObj = dbus.Interface(dbusProxy, "org.freedesktop.DBus")
-
-    if dbusObj.NameHasOwner("com.redhat.virt.manager"):
-        # We're already running, so just talk to existing process
-        managerProxy = bus.get_object("com.redhat.virt.manager",
-                                      "/com/redhat/virt/manager")
-        managerObj = dbus.Interface(managerProxy, "com.redhat.virt.manager")
-        return managerObj
-
-    else:
-        # Grab the service to allow others to talk to us later
-        name = dbus.service.BusName("com.redhat.virt.manager", bus=bus)
-        vmmRemote(engine, name)
 
 # Generic OptionParser callback for all --show-* options
 # This routine stores UUID to options.uuid for all --show-* options
@@ -318,12 +291,6 @@
 
     gobject.threads_init()
 
-    import dbus
-    import dbus.mainloop.glib
-    dbus.mainloop.glib.DBusGMainLoop(set_as_default=True)
-    dbus.mainloop.glib.threads_init()
-    import dbus.service
-
     # Specifically init config/gconf before the fork, so that pam
     # doesn't think we closed the app, therefor robbing us of
     # display access
@@ -365,20 +332,6 @@
 
     engine = vmmEngine()
 
-    if not options.nodbus:
-        try:
-            managerObj = dbus_config(engine)
-            if managerObj:
-                # yes, we exit completely now - remote service is in charge
-                logging.debug("Connected to already running instance.")
-                show_remote(managerObj, options.show,
-                            options.uri, options.uuid)
-                return
-        except:
-            # Something went wrong doing dbus setup, just ignore & carry on
-            logging.exception("Could not get connection to session bus, "
-                              "disabling DBus service")
-
     # Hook libvirt events into glib main loop
     import virtManager.libvirtglib
     virtManager.libvirtglib.register_event_impl()
