--- a/Source/LibJXR/image/decode/segdec.c
+++ b/Source/LibJXR/image/decode/segdec.c
@@ -26,6 +26,12 @@
 //
 //*@@@---@@@@******************************************************************
 
+#include <sys/types.h>
+#include <unistd.h>
+static __inline uint32_t _byteswap_ulong(uint32_t __x)
+{
+        return __x>>24 | __x>>8&0xff00 | __x<<8&0xff0000 | __x<<24;
+}
 #include "strcodec.h"
 #include "decode.h"
 
--- a/Source/LibJXR/jxrgluelib/JXRGlueJxr.c
+++ b/Source/LibJXR/jxrgluelib/JXRGlueJxr.c
@@ -26,6 +26,7 @@
 // POSSIBILITY OF SUCH DAMAGE.
 //
 //*@@@---@@@@******************************************************************
+#include <wchar.h>
 #include <limits.h>
 #include <JXRGlue.h>
 
--- a/Source/ZLib/gzlib.c
+++ b/Source/ZLib/gzlib.c
@@ -3,18 +3,10 @@
  * For conditions of distribution and use, see copyright notice in zlib.h
  */
 
+#include <sys/types.h>
+#include <unistd.h>
 #include "gzguts.h"
 
-#if defined(_WIN32) && !defined(__BORLANDC__) && !defined(__MINGW32__)
-#  define LSEEK _lseeki64
-#else
-#if defined(_LARGEFILE64_SOURCE) && _LFS64_LARGEFILE-0
-#  define LSEEK lseek64
-#else
-#  define LSEEK lseek
-#endif
-#endif
-
 /* Local functions */
 local void gz_reset OF((gz_statep));
 local gzFile gz_open OF((const void *, int, const char *));
@@ -249,13 +241,13 @@
         return NULL;
     }
     if (state->mode == GZ_APPEND) {
-        LSEEK(state->fd, 0, SEEK_END);  /* so gzoffset() is correct */
+        lseek(state->fd, 0, SEEK_END);  /* so gzoffset() is correct */
         state->mode = GZ_WRITE;         /* simplify later checks */
     }
 
     /* save the current position for rewinding (only if reading) */
     if (state->mode == GZ_READ) {
-        state->start = LSEEK(state->fd, 0, SEEK_CUR);
+        state->start = lseek(state->fd, 0, SEEK_CUR);
         if (state->start == -1) state->start = 0;
     }
 
@@ -356,7 +348,7 @@
         return -1;
 
     /* back up and start over */
-    if (LSEEK(state->fd, state->start, SEEK_SET) == -1)
+    if (lseek(state->fd, state->start, SEEK_SET) == -1)
         return -1;
     gz_reset(state);
     return 0;
@@ -397,7 +389,7 @@
     /* if within raw area while reading, just go there */
     if (state->mode == GZ_READ && state->how == COPY &&
             state->x.pos + offset >= 0) {
-        ret = LSEEK(state->fd, offset - state->x.have, SEEK_CUR);
+        ret = lseek(state->fd, offset - state->x.have, SEEK_CUR);
         if (ret == -1)
             return -1;
         state->x.have = 0;
@@ -493,7 +485,7 @@
         return -1;
 
     /* compute and return effective offset in file */
-    offset = LSEEK(state->fd, 0, SEEK_CUR);
+    offset = lseek(state->fd, 0, SEEK_CUR);
     if (offset == -1)
         return -1;
     if (state->mode == GZ_READ)             /* reading */
--- a/Source/ZLib/gzread.c
+++ b/Source/ZLib/gzread.c
@@ -3,6 +3,8 @@
  * For conditions of distribution and use, see copyright notice in zlib.h
  */
 
+#include <sys/types.h>
+#include <unistd.h>
 #include "gzguts.h"
 
 /* Local functions */
--- a/Source/ZLib/gzwrite.c
+++ b/Source/ZLib/gzwrite.c
@@ -3,6 +3,8 @@
  * For conditions of distribution and use, see copyright notice in zlib.h
  */
 
+#include <sys/types.h>
+#include <unistd.h>
 #include "gzguts.h"
 
 /* Local functions */
