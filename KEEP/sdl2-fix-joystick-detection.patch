--- SDL2-2.0.16.org/src/joystick/linux/SDL_sysjoystick.c	2021-09-06 19:52:19.455449210 +0000
+++ SDL2-2.0.16/src/joystick/linux/SDL_sysjoystick.c	2021-09-07 23:38:57.689945299 +0000
@@ -268,6 +268,14 @@
 }
 #endif /* SDL_USE_LIBUDEV */
 
+/* check whether path looks like /dev/input/js0 */
+static int
+IsJoystickDevicePath(const char *path)
+{
+    size_t l = strlen(path);
+    return l >= 4 && path[l-4] == '/' && path[l-3] == 'j' && path[l-2] == 's';
+}
+
 static int
 MaybeAddDevice(const char *path)
 {
@@ -303,6 +311,13 @@
 #endif
 
     isstick = IsJoystick(fd, &name, &guid);
+    if (!isstick && (isstick = IsJoystickDevicePath(path))) {
+        /* some joysticks addressed by classical path do not respond to
+           evdev ioctls */
+        name = SDL_CreateJoystickName(0, 0, NULL, "Unknown controller");
+        memcpy(guid.data, "oldskool", 8);
+    }
+
     close(fd);
     if (!isstick) {
         return -1;
@@ -560,8 +575,10 @@
 
     while (remain > 0) {
         if (buf.event.len > 0) {
-            if (StrHasPrefix(buf.event.name, "event") &&
-                StrIsInteger(buf.event.name + strlen ("event"))) {
+            if ((StrHasPrefix(buf.event.name, "event") &&
+                 StrIsInteger(buf.event.name + strlen ("event"))) ||
+                (StrHasPrefix(buf.event.name, "js") &&
+                 StrIsInteger(buf.event.name + strlen ("js")))) {
                 char path[PATH_MAX];
 
                 SDL_snprintf(path, SDL_arraysize(path), "/dev/input/%s", buf.event.name);
@@ -592,7 +609,8 @@
 static int
 filter_entries(const struct dirent *entry)
 {
-    return (SDL_strlen(entry->d_name) > 5 && SDL_strncmp(entry->d_name, "event", 5) == 0);
+    return ((SDL_strncmp(entry->d_name, "event", 5) == 0 && entry->d_name[5]) ||
+            (SDL_strncmp(entry->d_name, "js", 2) == 0 && entry->d_name[2]));
 }
 static int
 sort_entries(const struct dirent **a, const struct dirent **b)
@@ -635,6 +653,7 @@
 static void
 LINUX_JoystickDetect(void)
 {
+    int fallback_used = 0;
 #if SDL_USE_LIBUDEV
     if (enumeration_method == ENUMERATION_LIBUDEV) {
         SDL_UDEV_Poll();
@@ -649,8 +668,12 @@
 #endif
     {
         LINUX_FallbackJoystickDetect();
+        fallback_used = 1;
     }
 
+    if (numjoysticks == 0 && !fallback_used)
+        LINUX_FallbackJoystickDetect();
+
     HandlePendingRemovals();
 
     SDL_UpdateSteamControllers();
@@ -960,6 +983,45 @@
                 joystick->nballs = 0;
             }
         }
+    } else {
+        unsigned char na, nb, axmap[ABS_CNT];
+        int hat_index;
+        /* use old-school linux joystick.h ioctls */
+        if ((ioctl(fd, JSIOCGAXES, &na, 1) >= 0) &&
+            (ioctl(fd, JSIOCGBUTTONS, &nb, 1) >= 0) &&
+            (ioctl(fd, JSIOCGAXMAP, axmap, sizeof(axmap)) >= 0)) {
+            for (i = BTN_GAMEPAD; i < KEY_MAX && i < BTN_GAMEPAD+nb; ++i) {
+#ifdef DEBUG_INPUT_EVENTS
+                printf("Old-school Joystick has button: 0x%x\n", i);
+#endif
+                joystick->hwdata->key_map[i] = joystick->nbuttons;
+                joystick->hwdata->has_key[i] = SDL_TRUE;
+                ++joystick->nbuttons;
+            }
+            for (i = 0; i < na; ++i) {
+                switch (axmap[i]) {
+                case ABS_HAT0X: case ABS_HAT0Y:
+                case ABS_HAT1X: case ABS_HAT1Y:
+                case ABS_HAT2X: case ABS_HAT2Y:
+                case ABS_HAT3X: case ABS_HAT3Y:
+                    hat_index = (axmap[i] - ABS_HAT0X) / 2;
+                    joystick->hwdata->hats_indices[hat_index] = joystick->nhats++;
+                    joystick->hwdata->has_hat[hat_index] = SDL_TRUE;
+                    /* fall-through */
+                default:
+                    joystick->hwdata->abs_map[joystick->naxes] = axmap[i];
+                    joystick->hwdata->has_abs[joystick->naxes++] = SDL_TRUE;
+                }
+            }
+            /* todo: this is an exact copy of above, move it outside for
+               upstreamable patch version */
+            /* Allocate data to keep track of these thingamajigs */
+            if (joystick->nhats > 0) {
+                if (allocate_hatdata(joystick) < 0) {
+                    joystick->nhats = 0;
+                }
+            }
+        }
     }
 
     if (ioctl(fd, EVIOCGBIT(EV_FF, sizeof(ffbit)), ffbit) >= 0) {
@@ -993,7 +1055,8 @@
                                      &joystick->naxes,
                                      &joystick->nhats);
     } else {
-        const int fd = open(item->path, O_RDWR, 0);
+        int fd = open(item->path, O_RDWR, 0);
+        if (fd < 0) fd = open(item->path, O_RDONLY, 0);
         if (fd < 0) {
             return SDL_SetError("Unable to open %s", item->path);
         }
@@ -1250,6 +1313,44 @@
 }
 
 static SDL_INLINE void
+HandleInputEventsOldschool(SDL_Joystick *joystick)
+{
+    struct js_event events[32];
+    int i, len, code;
+
+    joystick->hwdata->fresh = SDL_FALSE;
+    while ((len = read(joystick->hwdata->fd, events, (sizeof events))) > 0) {
+        len /= sizeof(events[0]);
+        for (i = 0; i < len; ++i) {
+            code = events[i].number;
+            switch (events[i].type) {
+            case JS_EVENT_BUTTON:
+                SDL_PrivateJoystickButton(joystick,
+                                          joystick->hwdata->key_map[code+BTN_GAMEPAD],
+                                          events[i].value);
+                break;
+            case JS_EVENT_AXIS:
+                switch (joystick->hwdata->abs_map[code & ABS_MAX]) {
+                case 0xff: break;
+                case ABS_HAT0X: case ABS_HAT0Y:
+                case ABS_HAT1X: case ABS_HAT1Y:
+                case ABS_HAT2X: case ABS_HAT2Y:
+                case ABS_HAT3X: case ABS_HAT3Y:
+                    code = joystick->hwdata->abs_map[code & ABS_MAX];
+                    code -= ABS_HAT0X;
+                    HandleHat(joystick, joystick->hwdata->hats_indices[code / 2], code % 2, events[i].value);
+                    break;
+                default:
+                    events[i].value =
+                        AxisCorrect(joystick, code, events[i].value);
+                    SDL_PrivateJoystickAxis(joystick, code, events[i].value);
+                }
+            }
+        }
+    }
+}
+
+static SDL_INLINE void
 HandleInputEvents(SDL_Joystick *joystick)
 {
     struct input_event events[32];
@@ -1353,6 +1454,10 @@
         return;
     }
 
+    if (!memcmp(joystick->guid.data, "oldskool", 8)) {
+        HandleInputEventsOldschool(joystick);
+    }
+
     HandleInputEvents(joystick);
 
     /* Deliver ball motion updates */
