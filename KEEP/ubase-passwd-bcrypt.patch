diff -u -r ubase_before/config.def.h ubase/config.def.h
--- ubase_before/config.def.h	2016-04-25 15:33:45.172988937 +0000
+++ ubase/config.def.h	2016-04-25 20:01:07.801824588 +0000
@@ -2,7 +2,9 @@
 
 #define ENV_SUPATH	"/bin"
 #define ENV_PATH	"/bin"
-#define PW_CIPHER	"$6$"	/* SHA-512 */
+#define PW_CIPHER	"$2a$08$"
+#define STRLEN_BF_INTRO 7
+#define SALT_LEN	22
 #undef UTMP_PATH
 #define UTMP_PATH	"/var/run/utmp"
 #undef BTMP_PATH
diff -u -r ubase_before/passwd.c ubase/passwd.c
--- ubase_before/passwd.c	2016-04-25 15:33:45.175988938 +0000
+++ ubase/passwd.c	2016-04-25 20:03:34.924832252 +0000
@@ -18,6 +18,21 @@
 #include "text.h"
 #include "util.h"
 
+static ssize_t
+readall(int fd, void *buf, size_t len)
+{
+	size_t count = 0;
+
+	while (count<len) {
+		int i = read(fd, (char *)buf+count, len-count);
+		if (!i) break;
+		if (i<0) return i;
+		count += i;
+	}
+
+	return count;
+}
+
 static FILE *
 spw_get_file(const char *user)
 {
@@ -137,11 +152,14 @@
 main(int argc, char *argv[])
 {
 	char *cryptpass1 = NULL, *cryptpass2 = NULL, *cryptpass3 = NULL;
-	char *inpass, *p, *salt = PW_CIPHER, *prevhash = NULL;
+	char *inpass, *p, *prevsalt = NULL, *prevhash = NULL;
+	char salt[STRLEN_BF_INTRO + SALT_LEN + 1] = "$2a$08$";
+	char libbuf[4096];
 	struct passwd *pw;
 	struct spwd *spw = NULL;
 	FILE *fp = NULL;
 	int r = -1, status = 1;
+	int len = SALT_LEN;
 
 	ARGBEGIN {
 	default:
@@ -188,9 +206,9 @@
 			goto newpass;
 		}
 		if (pw->pw_passwd[0] == 'x')
-			prevhash = salt = spw->sp_pwdp;
+			prevhash = prevsalt = spw->sp_pwdp;
 		else
-			prevhash = salt = pw->pw_passwd;
+			prevhash = prevsalt = pw->pw_passwd;
 	}
 
 	printf("Changing password for %s\n", pw->pw_name);
@@ -199,14 +217,29 @@
 		eprintf("getpass:");
 	if (inpass[0] == '\0')
 		eprintf("no password supplied\n");
-	p = crypt(inpass, salt);
+	p = crypt(inpass, prevsalt);
 	if (!p)
 		eprintf("crypt:");
 	cryptpass1 = estrdup(p);
 	if (strcmp(cryptpass1, prevhash) != 0)
 		eprintf("incorrect password\n");
 
-newpass:
+newpass:;
+	int i = open("/dev/urandom", O_RDONLY);
+	readall(i, libbuf, len*6);
+	close(i);
+
+	for (i=0; i<len; i++) {
+		int bitpos = i*6, bits = bitpos/8;
+
+		bits = ((libbuf[i]+(libbuf[i+1]<<8)) >> (bitpos&7)) & 0x3f;
+		bits += 46;
+		if (bits > 57) bits += 7;
+		if (bits > 90) bits += 6;
+
+		salt[STRLEN_BF_INTRO+i] = bits;
+	}
+
 	inpass = getpass("Enter new password: ");
 	if (!inpass)
 		eprintf("getpass:");
