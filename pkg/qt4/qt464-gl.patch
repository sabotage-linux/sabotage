--- qt-everywhere-opensource-src-4.6.4.org/src/opengl/qgl_x11egl.cpp	2013-10-25 12:36:38.796114751 +0000
+++ qt-everywhere-opensource-src-4.6.4/src/opengl/qgl_x11egl.cpp	2013-10-25 17:07:16.989531864 +0000
@@ -320,8 +320,8 @@
                     vi = *chosenVisualInfo;
                 }
                 else {
-                    qWarning("Warning: EGL suggested using X visual ID %d for config %d, but this is not ARGB",
-                             nativeVisualId, (int)config);
+                    qWarning("Warning: EGL suggested using X visual ID %d for config %p, but this is not ARGB",
+                             nativeVisualId, config);
                     vi.visualid = 0;
                 }
             } else
@@ -333,14 +333,14 @@
 #endif
                     vi = *chosenVisualInfo;
                 } else
-                    qWarning("Warning: EGL suggested using X visual ID %d (%d bpp) for config %d (%d bpp), but the depths do not match!",
-                             nativeVisualId, chosenVisualInfo->depth, (int)config, eglConfigColorSize);
+                    qWarning("Warning: EGL suggested using X visual ID %d (%d bpp) for config %p (%d bpp), but the depths do not match!",
+                             nativeVisualId, chosenVisualInfo->depth, config, eglConfigColorSize);
             }
             XFree(chosenVisualInfo);
         }
         else {
-            qWarning("Warning: EGL suggested using X visual ID %d for config %d, but this seems to be invalid!",
-                     nativeVisualId, (int)config);
+            qWarning("Warning: EGL suggested using X visual ID %d for config %p, but this seems to be invalid!",
+                     nativeVisualId, config);
             vi.visualid = 0;
         }
     }
@@ -382,8 +382,8 @@
         int err;
         err = XMatchVisualInfo(x11Info.display(), x11Info.screen(), depth, TrueColor, &vi);
         if (err == 0) {
-            qWarning("Warning: Can't find an X visual which matches the EGL config(%d)'s depth (%d)!",
-                     (int)config, depth);
+            qWarning("Warning: Can't find an X visual which matches the EGL config(%p)'s depth (%d)!",
+                     config, depth);
             depth = x11Info.depth();
             err = XMatchVisualInfo(x11Info.display(), x11Info.screen(), depth, TrueColor, &vi);
             if (err == 0) {
@@ -613,7 +613,7 @@
             if (configCount > 0) {
                 // Got one
                 qDebug() << "Found an" << (hasAlpha ? "ARGB" : "RGB") << (readOnly ? "readonly" : "target" )
-                         << "config (" << int(*targetConfig) << ") to create a pixmap surface:";
+                         << "config (" << long(*targetConfig) << ") to create a pixmap surface:";
 
 //                QEglProperties configProps(*targetConfig);
 //                qDebug() << configProps.toString();
@@ -655,7 +655,7 @@
 //    qDebug("qt_createEGLSurfaceForPixmap() created surface 0x%x for pixmap 0x%x",
 //           pixmapSurface, pixmapData->handle());
     if (pixmapSurface == EGL_NO_SURFACE) {
-        qWarning() << "Failed to create a pixmap surface using config" << (int)pixmapConfig
+        qWarning() << "Failed to create a pixmap surface using config" << (long)pixmapConfig
                    << ":" << QEglContext::errorString(eglGetError());
         return false;
     }
--- qt-everywhere-opensource-src-4.6.4.org/src/opengl/qwindowsurface_gl.cpp	2013-10-25 12:36:38.796114751 +0000
+++ qt-everywhere-opensource-src-4.6.4/src/opengl/qwindowsurface_gl.cpp	2013-10-25 17:00:58.391545454 +0000
@@ -366,7 +366,7 @@
     if (ctxpriv->eglSurface == EGL_NO_SURFACE) {
         qWarning() << "hijackWindow() could not create EGL surface";
     }
-    qDebug("QGLWindowSurface - using EGLConfig %d", reinterpret_cast<int>(ctxpriv->eglContext->config()));
+    qDebug("QGLWindowSurface - using EGLConfig %p", reinterpret_cast<void*>(ctxpriv->eglContext->config()));
 #endif
 
     widgetPrivate->extraData()->glContext = ctx;
